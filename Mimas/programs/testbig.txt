type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


type mybool.
mybool -- false. 
mybool -- true.

def not(bool) -> bool.
not(false) -> true.
not(true ) -> false.

def bool and bool -> bool.
false and _ -> false.
true  and A -> A.

def bool or bool -> bool.
true  or _ -> true.
false or A -> A.

def bool xor bool -> bool.
A xor B -> (A and not(B)) or (not(A) and B).

def if(bool,{A},{A}) -> A.
if(false, _ , {F}) -> F.
if(true ,{T},  _ ) -> T.

def nth(int,list(A),A) -> A.
nth(_,[],D) -> D.
nth(0,H|_,_)-> H.
nth(N,_|T,D)-> nth(N-1,T,D).

def addvecint(int^N,int^N) -> int^N.
addvecint(A,B) -> map2(add,A,B).


